{
    "name": "vscode-copilot-data-analysis",
    "publisher": "ms-vscode",
    "displayName": "Data Analysis for Copilot",
    "description": "This tool extends the LLM's capabilities by allowing it to run Python code in a sandboxed Python environment (Pyodide) for a wide range of computational tasks and data manipulations that it cannot perform directly.",
    "author": "Microsoft Corporation",
    "homepage": "https://github.com/microsoft/vscode-data-analysis-for-copilot",
    "icon": "images/icon.png",
    "version": "0.2.2",
    "license": "MIT",
    "repository": {
        "type": "git",
        "url": "https://github.com/microsoft/vscode-data-analysis-for-copilot"
    },
    "bugs": {
        "url": "https://github.com/microsoft/vscode-data-analysis-for-copilot/issues"
    },
    "engines": {
        "vscode": "^1.95.0"
    },
    "categories": [
        "AI",
        "Data Science",
        "Machine Learning",
        "Visualization",
        "Programming Languages",
        "Chat"
    ],
    "activationEvents": [
        "onChatParticipant:dachat.data"
    ],
    "extensionDependencies": [
        "GitHub.copilot-chat"
    ],
    "keywords": [
        "ai",
        "analysis",
        "chat",
        "co-pilot",
        "data"
    ],
    "main": "./out/extension.js",
    "capabilities": {
        "virtualWorkspaces": true,
        "untrustedWorkspaces": {
            "supported": "limited",
            "description": "%capabilities.untrustedWorkspace.description%"
        }
    },
    "contributes": {
        "commands": [
            {
                "category": "Chat",
                "command": "dachat.analyzeCsv",
                "enablement": "isWorkspaceTrusted && resourceExtname == .csv && resourceScheme =~ /^^file$/ && workspaceFolderCount > 0",
                "icon": "$(copilot)",
                "title": "%commands.dachat.analyzeCsv.title%",
                "shortTitle": "%commands.dachat.analyzeCsv.shortTitle%"
            }
        ],
        "menus": {
            "commandPalette": [
                {
                    "command": "dachat.analyzeCsv",
                    "when": "false"
                }
            ],
            "editor/title": [
                {
                    "command": "dachat.analyzeCsv",
                    "when": "isWorkspaceTrusted && resourceExtname == .csv && resourceScheme =~ /^^file$/ && workspaceFolderCount > 0",
                    "group": "navigation",
                    "title": "%commands.dachat.analyzeCsv.title%"
                }
            ],
            "editor/context": [
                {
                    "command": "dachat.analyzeCsv",
                    "when": "isWorkspaceTrusted && resourceExtname == .csv && resourceScheme =~ /^^file$/ && workspaceFolderCount > 0",
                    "group": "data",
                    "title": "%commands.dachat.analyzeCsv.title%"
                }
            ],
            "explorer/context": [
                {
                    "command": "dachat.analyzeCsv",
                    "when": "isWorkspaceTrusted && resourceExtname == .csv && resourceScheme =~ /^^file$/ && workspaceFolderCount > 0",
                    "group": "data",
                    "title": "%commands.dachat.analyzeCsv.title%"
                }
            ]
        },
        "chatParticipants": [
            {
                "id": "dachat.data",
                "fullName": "Data Analytics",
                "name": "data",
                "description": "I can help you with data analytics",
                "sampleRequest": "Help me analyze the csv file",
                "isSticky": true,
                "disambiguation": [
                    {
                        "category": "analysis",
                        "description": "Performs analysis on some data provided by user either as a file or content",
                        "examples": [
                            "Analyze the contents of sample.csv",
                            "What is the correlation between house price and income in sample.csv",
                            "What is the median house price in sample.csv"
                        ]
                    },
                    {
                        "category": "visualize",
                        "description": "Display visualizations based on some analysis or data provided by user either as a file or content",
                        "examples": [
                            "Visualize the contents of sample.csv",
                            "Generate a plot of average house prices by state",
                            "Display the correlation between house price and income in sample.csv",
                            "Display a chart with the median house price in sample.csv"
                        ]
                    }
                ],
                "commands": [
                    {
                        "description": "Export the result of the analysis along with the Python code into multiple formats",
                        "isSticky": false,
                        "name": "export"
                    }
                ]
            }
        ],
        "languageModelTools": [
            {
                "name": "dachat_data_findFiles",
                "tags": [],
                "displayName": "Find Files",
                "modelDescription": "Search for files in the current workspace",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "pattern": {
                            "type": "string",
                            "description": "Search for files that match this glob pattern"
                        }
                    },
                    "required": [
                        "pattern"
                    ]
                }
            },
            {
                "name": "dachat_data_runPython",
                "tags": [
                    "Python Execution"
                ],
                "displayName": "Run Python",
                "modelDescription": "Execute Python code locally using Pyodide, providing access to Python's extensive functionality. This tool extends the LLM's capabilities by allowing it to run Python code for a wide range of computational tasks and data manipulations that it cannot perform directly. When you know the workspace folder path and the file path, use the relative path to the file when generating code.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string",
                            "description": "The Python code to run"
                        },
                        "reason": {
                            "type": "string",
                            "description": "The reason for running the code"
                        }
                    },
                    "required": [
                        "code"
                    ]
                }
            },
            {
                "name": "dachat_data_installPythonPackage",
                "tags": [],
                "displayName": "Install Missing Python Packages",
                "modelDescription": "Install missing Python packages in the tool used to run Python code using Pyodide.",
                "inputSchema": {
                    "type": "object",
                    "properties": {
                        "package": {
                            "type": "string",
                            "description": "Name of the Python package that could not be found and needs to be installed"
                        }
                    },
                    "required": [
                        "code"
                    ]
                }
            }
        ]
    },
    "scripts": {
        "vscode:prepublish": "npm run clean && npm run postinstall && npm run compile-extension -- --minify",
        "compile": "npm run compile-types && npm run compile-extension",
        "compile-extension": "esbuild ./src/extension.ts --bundle --external:vscode --outfile=out/extension.js --sourcemap --format=cjs --platform=node --target=node18",
        "watch-extension": "npm run compile-extension -- --watch",
        "watch": "npm run watch-extension",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "compile-types": "tsc -p . --noEmit",
        "watch-types": "tsc -p . -w --noEmit",
        "clean": "npx tsx build/clean.ts",
        "lint": "eslint src",
        "lint-fix": "eslint --fix src",
        "download-api": "dts main",
        "postinstall": "npm run download-api && npm run downloadPyodide",
        "downloadPyodide": "npx tsx build/download.ts"
    },
    "devDependencies": {
        "@eslint/js": "^9.12.0",
        "@types/chai": "^4.3.6",
        "@types/follow-redirects": "^1.14.4",
        "@types/json-schema": "^7.0.15",
        "@types/mocha": "^10.0.9",
        "@types/node": "^20.5.9",
        "@types/node-fetch": "^2.5.7",
        "@types/proxy-from-env": "^1.0.4",
        "@typescript-eslint/eslint-plugin": "^8.8.1",
        "@typescript-eslint/parser": "^8.8.1",
        "@vscode/dts": "^0.4.1",
        "@vscode/test-cli": "^0.0.10",
        "@vscode/test-electron": "^2.4.1",
        "chai": "^4.3.10",
        "cli-progress": "^3.12.0",
        "decompress": "^4.2.1",
        "decompress-tarbz2": "^4.1.1",
        "esbuild": "^0.21.5",
        "eslint": "^9.12.0",
        "follow-redirects": "^1.15.9",
        "globals": "^15.10.0",
        "https-proxy-agent": "^7.0.5",
        "proxy-from-env": "^1.1.0",
        "tar": "^7.4.3",
        "tsx": "^4.19.1",
        "typescript": "^5.6.3",
        "typescript-eslint": "^8.8.1",
        "unzipper": "^0.12.3"
    },
    "dependencies": {
        "@vscode/prompt-tsx": "^0.3.0-alpha.12",
        "isbinaryfile": "^5.0.4",
        "sanitize-filename": "^1.6.3"
    }
}
